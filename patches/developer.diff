diff -r 09259b3d097d code/renderer/gl_shader.cpp
--- code/renderer/gl_shader.cpp	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/gl_shader.cpp	Tue Mar 15 18:55:52 2011 -0700
@@ -103,7 +103,7 @@
 	{
 		const char* compileMacros = GetCompileMacrosString(i);
 
-		ri.Printf(PRINT_ALL, "Compile macros: '%s'\n", compileMacros);
+		ri.Printf(PRINT_DEVELOPER, "Compile macros: '%s'\n", compileMacros);
 
 		shaderProgram_t *shaderProgram = &_shaderPrograms[i];
 
@@ -188,7 +188,7 @@
 	{
 		const char* compileMacros = GetCompileMacrosString(i);
 
-		ri.Printf(PRINT_ALL, "Compile macros: '%s'\n", compileMacros);
+		ri.Printf(PRINT_DEVELOPER, "Compile macros: '%s'\n", compileMacros);
 
 		shaderProgram_t *shaderProgram = &_shaderPrograms[i];
 
@@ -259,7 +259,7 @@
 	{
 		const char* compileMacros = GetCompileMacrosString(i);
 
-		ri.Printf(PRINT_ALL, "Compile macros: '%s'\n", compileMacros);
+		ri.Printf(PRINT_DEVELOPER, "Compile macros: '%s'\n", compileMacros);
 
 		shaderProgram_t *shaderProgram = &_shaderPrograms[i];
 
@@ -314,4 +314,4 @@
 	}
 
 	SelectProgram();
-}
\ No newline at end of file
+}
diff -r 09259b3d097d code/renderer/tr_bsp.c
--- code/renderer/tr_bsp.c	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/tr_bsp.c	Tue Mar 15 18:55:52 2011 -0700
@@ -478,7 +478,7 @@
 
 		if(!Q_stricmp(token, "FORMAT"))
 		{
-			//ri.Printf(PRINT_ALL, "LoadRGBE: FORMAT found\n");
+			//ri.Printf(PRINT_DEVELOPER, "LoadRGBE: FORMAT found\n");
 
 			token = Com_ParseExt((char **)&buf_p, qfalse);
 			if(!Q_stricmp(token, "="))
@@ -496,22 +496,22 @@
 						}
 						else
 						{
-							ri.Printf(PRINT_ALL, "LoadRGBE: Expected 'bit_rle_rgbe' found instead '%s'\n", token);
+							ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected 'bit_rle_rgbe' found instead '%s'\n", token);
 						}
 					}
 					else
 					{
-						ri.Printf(PRINT_ALL, "LoadRGBE: Expected '-' found instead '%s'\n", token);
+						ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected '-' found instead '%s'\n", token);
 					}
 				}
 				else
 				{
-					ri.Printf(PRINT_ALL, "LoadRGBE: Expected '32' found instead '%s'\n", token);
+					ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected '32' found instead '%s'\n", token);
 				}
 			}
 			else
 			{
-				ri.Printf(PRINT_ALL, "LoadRGBE: Expected '=' found instead '%s'\n", token);
+				ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected '=' found instead '%s'\n", token);
 			}
 		}
 
@@ -535,17 +535,17 @@
 					}
 					else
 					{
-						ri.Printf(PRINT_ALL, "LoadRGBE: Expected 'X' found instead '%s'\n", token);
+						ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected 'X' found instead '%s'\n", token);
 					}
 				}
 				else
 				{
-					ri.Printf(PRINT_ALL, "LoadRGBE: Expected '+' found instead '%s'\n", token);
+					ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected '+' found instead '%s'\n", token);
 				}
 			}
 			else
 			{
-				ri.Printf(PRINT_ALL, "LoadRGBE: Expected 'Y' found instead '%s'\n", token);
+				ri.Printf(PRINT_DEVELOPER, "LoadRGBE: Expected 'Y' found instead '%s'\n", token);
 			}
 		}
 	}
@@ -816,7 +816,7 @@
 				return;
 			}
 
-			ri.Printf(PRINT_ALL, "...loading %i HDR lightmaps\n", numLightmaps);
+			ri.Printf(PRINT_DEVELOPER, "...loading %i HDR lightmaps\n", numLightmaps);
 
 			if(r_hdrRendering->integer && r_hdrLightmap->integer && glConfig.framebufferObjectAvailable &&
 			   glConfig.framebufferBlitAvailable && glConfig.textureFloatAvailable && glConfig.textureHalfFloatAvailable)
@@ -826,13 +826,13 @@
 
 				for(i = 0; i < numLightmaps; i++)
 				{
-					ri.Printf(PRINT_ALL, "...loading external lightmap as RGB 16 bit half HDR '%s/%s'\n", mapName, lightmapFiles[i]);
+					ri.Printf(PRINT_DEVELOPER, "...loading external lightmap as RGB 16 bit half HDR '%s/%s'\n", mapName, lightmapFiles[i]);
 
 					width = height = 0;
 					//LoadRGBEToFloats(va("%s/%s", mapName, lightmapFiles[i]), &hdrImage, &width, &height, qtrue, qfalse, qtrue);
 					LoadRGBEToHalfs(va("%s/%s", mapName, lightmapFiles[i]), &hdrImage, &width, &height);
 
-					//ri.Printf(PRINT_ALL, "...converted '%s/%s' to HALF format\n", mapName, lightmapFiles[i]);
+					//ri.Printf(PRINT_DEVELOPER, "...converted '%s/%s' to HALF format\n", mapName, lightmapFiles[i]);
 
 					image = R_AllocImage(va("%s/%s", mapName, lightmapFiles[i]), qtrue);
 					if(!image)
@@ -894,7 +894,7 @@
 
 				for(i = 0; i < numLightmaps; i++)
 				{
-					ri.Printf(PRINT_ALL, "...loading external lightmap as RGB8 LDR '%s/%s'\n", mapName, lightmapFiles[i]);
+					ri.Printf(PRINT_DEVELOPER, "...loading external lightmap as RGB8 LDR '%s/%s'\n", mapName, lightmapFiles[i]);
 
 					width = height = 0;
 					LoadRGBEToBytes(va("%s/%s", mapName, lightmapFiles[i]), &ldrImage, &width, &height);
@@ -926,11 +926,11 @@
 
 				qsort(lightmapFiles, numLightmaps, sizeof(char *), LightmapNameCompare);
 
-				ri.Printf(PRINT_ALL, "...loading %i deluxemaps\n", numLightmaps);
+				ri.Printf(PRINT_DEVELOPER, "...loading %i deluxemaps\n", numLightmaps);
 
 				for(i = 0; i < numLightmaps; i++)
 				{
-					ri.Printf(PRINT_ALL, "...loading external lightmap '%s/%s'\n", mapName, lightmapFiles[i]);
+					ri.Printf(PRINT_DEVELOPER, "...loading external lightmap '%s/%s'\n", mapName, lightmapFiles[i]);
 
 					image = R_FindImageFile(va("%s/%s", mapName, lightmapFiles[i]), IF_NORMALMAP | IF_NOCOMPRESSION, FT_DEFAULT, WT_CLAMP);
 					Com_AddToGrowList(&tr.deluxemaps, image);
@@ -955,14 +955,14 @@
 
 			qsort(lightmapFiles, numLightmaps, sizeof(char *), LightmapNameCompare);
 
-			ri.Printf(PRINT_ALL, "...loading %i lightmaps\n", numLightmaps);
+			ri.Printf(PRINT_DEVELOPER, "...loading %i lightmaps\n", numLightmaps);
 
 			// we are about to upload textures
 			R_SyncRenderThread();
 
 			for(i = 0; i < numLightmaps; i++)
 			{
-				ri.Printf(PRINT_ALL, "...loading external lightmap '%s/%s'\n", mapName, lightmapFiles[i]);
+				ri.Printf(PRINT_DEVELOPER, "...loading external lightmap '%s/%s'\n", mapName, lightmapFiles[i]);
 
 				if(tr.worldDeluxeMapping)
 				{
@@ -998,7 +998,7 @@
 		// create all the lightmaps
 		tr.numLightmaps = len / (LIGHTMAP_SIZE * LIGHTMAP_SIZE * 3);
 
-		ri.Printf(PRINT_ALL, "...loading %i lightmaps\n", tr.numLightmaps);
+		ri.Printf(PRINT_DEVELOPER, "...loading %i lightmaps\n", tr.numLightmaps);
 
 		for(i = 0; i < tr.numLightmaps; i++)
 		{
@@ -1198,7 +1198,7 @@
 	int             len;
 	byte           *buf;
 
-	ri.Printf(PRINT_ALL, "...loading visibility\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading visibility\n");
 
 	len = (s_worldData.numClusters + 63) & ~63;
 	s_worldData.novis = ri.Hunk_Alloc(len, h_low);
@@ -1250,18 +1250,18 @@
 	}
 	dsh = &s_worldData.shaders[shaderNum];
 
-//  ri.Printf(PRINT_ALL, "ShaderForShaderNum: '%s'\n", dsh->shader);
+//  ri.Printf(PRINT_DEVELOPER, "ShaderForShaderNum: '%s'\n", dsh->shader);
 
 	shader = R_FindShader(dsh->shader, SHADER_3D_STATIC, qtrue);
 
 	// if the shader had errors, just use default shader
 	if(shader->defaultShader)
 	{
-//      ri.Printf(PRINT_ALL, "failed\n");
+//      ri.Printf(PRINT_DEVELOPER, "failed\n");
 		return tr.defaultShader;
 	}
 
-//  ri.Printf(PRINT_ALL, "success\n");
+//  ri.Printf(PRINT_DEVELOPER, "success\n");
 	return shader;
 }
 
@@ -2204,7 +2204,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert column into grid2 right after after column l
 					if(m)
 						row = grid2->height - 1;
@@ -2251,7 +2251,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert row into grid2 right after after row l
 					if(m)
 						column = grid2->width - 1;
@@ -2311,7 +2311,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert column into grid2 right after after column l
 					if(m)
 						row = grid2->height - 1;
@@ -2359,7 +2359,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert row into grid2 right after after row l
 					if(m)
 						column = grid2->width - 1;
@@ -2421,7 +2421,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert column into grid2 right after after column l
 					if(m)
 						row = grid2->height - 1;
@@ -2468,7 +2468,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert row into grid2 right after after row l
 					if(m)
 						column = grid2->width - 1;
@@ -2530,7 +2530,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert column into grid2 right after after column l
 					if(m)
 						row = grid2->height - 1;
@@ -2578,7 +2578,7 @@
 					if(fabs(v1[0] - v2[0]) < .01 && fabs(v1[1] - v2[1]) < .01 && fabs(v1[2] - v2[2]) < .01)
 						continue;
 					//
-					//ri.Printf( PRINT_ALL, "found highest LoD crack between two patches\n" );
+					//ri.Printf( PRINT_DEVELOPER, "found highest LoD crack between two patches\n" );
 					// insert row into grid2 right after after row l
 					if(m)
 						column = grid2->width - 1;
@@ -2652,7 +2652,7 @@
 	int             i, stitched, numstitches;
 	srfGridMesh_t  *grid1;
 
-	ri.Printf(PRINT_ALL, "...stitching LoD cracks\n");
+	ri.Printf(PRINT_DEVELOPER, "...stitching LoD cracks\n");
 
 	numstitches = 0;
 	do
@@ -2675,7 +2675,7 @@
 			numstitches += R_TryStitchingPatch(i);
 		}
 	} while(stitched);
-	ri.Printf(PRINT_ALL, "stitched %d LoD cracks\n", numstitches);
+	ri.Printf(PRINT_DEVELOPER, "stitched %d LoD cracks\n", numstitches);
 }
 
 /*
@@ -2957,28 +2957,28 @@
 		}
 
 #if DEBUG_OPTIMIZEVERTICES
-		ri.Printf(PRINT_ALL, "input triangles: ");
+		ri.Printf(PRINT_DEVELOPER, "input triangles: ");
 		for(k = 0, tri = triangles; k < numTriangles; k++, tri++)
 		{
-			ri.Printf(PRINT_ALL, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id, verts[tri->indexes[2]].id);
-		}
-		ri.Printf(PRINT_ALL, "\n");
+			ri.Printf(PRINT_DEVELOPER, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id, verts[tri->indexes[2]].id);
+		}
+		ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 #if DEBUG_OPTIMIZEVERTICES
-		ri.Printf(PRINT_ALL, "input vertices: ");
+		ri.Printf(PRINT_DEVELOPER, "input vertices: ");
 		for(i = 0; i < numVerts; i++)
 		{
 			if(redundantIndex[i] != -1)
 			{
-				ri.Printf(PRINT_ALL, "(%i,%i),", i, redundantIndex[i]);
+				ri.Printf(PRINT_DEVELOPER, "(%i,%i),", i, redundantIndex[i]);
 			}
 			else
 			{
-				ri.Printf(PRINT_ALL, "(%i,-),", i);
-			}
-		}
-		ri.Printf(PRINT_ALL, "\n");
+				ri.Printf(PRINT_DEVELOPER, "(%i,-),", i);
+			}
+		}
+		ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 		for(i = 0; i < numVerts; i++)
@@ -2995,12 +2995,12 @@
 		}
 
 #if DEBUG_OPTIMIZEVERTICES
-		ri.Printf(PRINT_ALL, "output vertices: ");
+		ri.Printf(PRINT_DEVELOPER, "output vertices: ");
 		for(i = 0; i < numOutVerts; i++)
 		{
-			ri.Printf(PRINT_ALL, "(%i),", outVerts[i].id);
-		}
-		ri.Printf(PRINT_ALL, "\n");
+			ri.Printf(PRINT_DEVELOPER, "(%i),", outVerts[i].id);
+		}
+		ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 		for(i = 0; i < numVerts;)
@@ -3010,8 +3010,8 @@
 			if(redundantIndex[i] != -1)
 			{
 #if DEBUG_OPTIMIZEVERTICES
-				ri.Printf(PRINT_ALL, "-------------------------------------------------\n");
-				ri.Printf(PRINT_ALL, "changing triangles for redundant vertex (%i->%i):\n", i, redundantIndex[i]);
+				ri.Printf(PRINT_DEVELOPER, "-------------------------------------------------\n");
+				ri.Printf(PRINT_DEVELOPER, "changing triangles for redundant vertex (%i->%i):\n", i, redundantIndex[i]);
 #endif
 
 				// kill redundant vert
@@ -3025,7 +3025,7 @@
 							tri->indexes[l] = redundantIndex[i];	//numOutVerts;
 
 #if DEBUG_OPTIMIZEVERTICES
-							ri.Printf(PRINT_ALL, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, i, redundantIndex[i]);
+							ri.Printf(PRINT_DEVELOPER, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, i, redundantIndex[i]);
 #endif
 						}
 #if 1
@@ -3033,7 +3033,7 @@
 						{
 							tri->indexes[l]--;
 #if DEBUG_OPTIMIZEVERTICES
-							ri.Printf(PRINT_ALL, "decTriangleIndex<%i,%i>(%i->%i)\n", k, l, tri->indexes[l] + 1, tri->indexes[l]);
+							ri.Printf(PRINT_DEVELOPER, "decTriangleIndex<%i,%i>(%i->%i)\n", k, l, tri->indexes[l] + 1, tri->indexes[l]);
 #endif
 
 							if(tri->indexes[l] < 0)
@@ -3051,19 +3051,19 @@
 				}
 
 #if DEBUG_OPTIMIZEVERTICES
-				ri.Printf(PRINT_ALL, "pending redundant vertices: ");
+				ri.Printf(PRINT_DEVELOPER, "pending redundant vertices: ");
 				for(j = i + 1; j < numVerts; j++)
 				{
 					if(redundantIndex[j] != -1)
 					{
-						ri.Printf(PRINT_ALL, "(%i,%i),", j, redundantIndex[j]);
+						ri.Printf(PRINT_DEVELOPER, "(%i,%i),", j, redundantIndex[j]);
 					}
 					else
 					{
-						//ri.Printf(PRINT_ALL, "(%i,-),", j);
+						//ri.Printf(PRINT_DEVELOPER, "(%i,-),", j);
 					}
 				}
-				ri.Printf(PRINT_ALL, "\n");
+				ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 
@@ -3072,7 +3072,7 @@
 					if(redundantIndex[j] != -1)	//> i)//== tri->indexes[l])
 					{
 #if DEBUG_OPTIMIZEVERTICES
-						ri.Printf(PRINT_ALL, "updateRedundantIndex(%i->%i) to (%i->%i)\n", j, redundantIndex[j], j - 1,
+						ri.Printf(PRINT_DEVELOPER, "updateRedundantIndex(%i->%i) to (%i->%i)\n", j, redundantIndex[j], j - 1,
 								  redundantIndex[j]);
 #endif
 
@@ -3095,13 +3095,13 @@
 				}
 
 #if DEBUG_OPTIMIZEVERTICES
-				ri.Printf(PRINT_ALL, "current triangles: ");
+				ri.Printf(PRINT_DEVELOPER, "current triangles: ");
 				for(k = 0, tri = triangles; k < numTriangles; k++, tri++)
 				{
-					ri.Printf(PRINT_ALL, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id,
+					ri.Printf(PRINT_DEVELOPER, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id,
 							  verts[tri->indexes[2]].id);
 				}
-				ri.Printf(PRINT_ALL, "\n");
+				ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 			}
 
@@ -3112,19 +3112,19 @@
 		}
 
 #if DEBUG_OPTIMIZEVERTICES
-		ri.Printf(PRINT_ALL, "output triangles: ");
+		ri.Printf(PRINT_DEVELOPER, "output triangles: ");
 		for(k = 0, tri = triangles; k < numTriangles; k++, tri++)
 		{
-			ri.Printf(PRINT_ALL, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id, verts[tri->indexes[2]].id);
-		}
-		ri.Printf(PRINT_ALL, "\n");
+			ri.Printf(PRINT_DEVELOPER, "(%i,%i,%i),", verts[tri->indexes[0]].id, verts[tri->indexes[1]].id, verts[tri->indexes[2]].id);
+		}
+		ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 		if(c_redundantVertexes)
 		{
 			//*numVerts -= c_redundantVertexes;
 
-			//ri.Printf(PRINT_ALL, "removed %i redundant vertices\n", c_redundantVertexes);
+			//ri.Printf(PRINT_DEVELOPER, "removed %i redundant vertices\n", c_redundantVertexes);
 		}
 
 		return numOutVerts;
@@ -3171,7 +3171,7 @@
 		}
 	}
 
-	ri.Printf(PRINT_ALL, "OptimizeTriangles: minVert %i maxVert %i\n", minVert, maxVert);
+	ri.Printf(PRINT_DEVELOPER, "OptimizeTriangles: minVert %i maxVert %i\n", minVert, maxVert);
 
 //  if(compareFunction != compareVert || minVert != minVertOld || maxVert != maxVertOld)
 	{
@@ -3203,7 +3203,7 @@
 	{
 		if(redundantIndex[i] != -1)
 		{
-			//ri.Printf(PRINT_ALL, "changing triangles for redundant vertex (%i->%i):\n", i, redundantIndex[i]);
+			//ri.Printf(PRINT_DEVELOPER, "changing triangles for redundant vertex (%i->%i):\n", i, redundantIndex[i]);
 
 			// kill redundant vert
 			for(k = 0, tri = triangles; k < numTriangles; k++, tri++)
@@ -3215,7 +3215,7 @@
 						// replace duplicated index j with the original vertex index i
 						tri->indexes[l] = redundantIndex[i];
 
-						//ri.Printf(PRINT_ALL, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, i, redundantIndex[i]);
+						//ri.Printf(PRINT_DEVELOPER, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, i, redundantIndex[i]);
 					}
 				}
 			}
@@ -3225,33 +3225,33 @@
 	}
 
 #if 0
-	ri.Printf(PRINT_ALL, "vertices: ");
+	ri.Printf(PRINT_DEVELOPER, "vertices: ");
 	for(i = 0; i < numVerts; i++)
 	{
 		if(redundantIndex[i] != -1)
 		{
-			ri.Printf(PRINT_ALL, "(%i,%i),", i, redundantIndex[i]);
+			ri.Printf(PRINT_DEVELOPER, "(%i,%i),", i, redundantIndex[i]);
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "(%i,-),", i);
-		}
-	}
-	ri.Printf(PRINT_ALL, "\n");
-
-	ri.Printf(PRINT_ALL, "triangles: ");
+			ri.Printf(PRINT_DEVELOPER, "(%i,-),", i);
+		}
+	}
+	ri.Printf(PRINT_DEVELOPER, "\n");
+
+	ri.Printf(PRINT_DEVELOPER, "triangles: ");
 	for(k = 0, tri = triangles; k < numTriangles; k++, tri++)
 	{
-		ri.Printf(PRINT_ALL, "(%i,%i,%i),", tri->indexes[0], tri->indexes[1], tri->indexes[2]);
-	}
-	ri.Printf(PRINT_ALL, "\n");
+		ri.Printf(PRINT_DEVELOPER, "(%i,%i,%i),", tri->indexes[0], tri->indexes[1], tri->indexes[2]);
+	}
+	ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 	if(c_redundantVertexes)
 	{
 		// *numVerts -= c_redundantVertexes;
 
-		//ri.Printf(PRINT_ALL, "removed %i redundant vertices\n", c_redundantVertexes);
+		//ri.Printf(PRINT_DEVELOPER, "removed %i redundant vertices\n", c_redundantVertexes);
 	}
 #endif
 }
@@ -3271,7 +3271,7 @@
 				// replace duplicated index j with the original vertex index i
 				tri->indexes[l] = redundantIndex[tri->indexes[l]];
 
-				//ri.Printf(PRINT_ALL, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, tri->indexes[l], redundantIndex[tri->indexes[l]]);
+				//ri.Printf(PRINT_DEVELOPER, "mapTriangleIndex<%i,%i>(%i->%i)\n", k, l, tri->indexes[l], redundantIndex[tri->indexes[l]]);
 
 				c_redundantVertexes++;
 			}
@@ -3358,7 +3358,7 @@
 	token = Com_ParseExt(&buf_p, qtrue);
 	numAreaPortals = atoi(token);
 
-	ri.Printf(PRINT_ALL, "...loading %i area portals\n", numAreaPortals);
+	ri.Printf(PRINT_DEVELOPER, "...loading %i area portals\n", numAreaPortals);
 
 	s_worldData.numAreaPortals = numAreaPortals;
 	s_worldData.areaPortals = ri.Hunk_Alloc(numAreaPortals * sizeof(*s_worldData.areaPortals), h_low);
@@ -3426,7 +3426,7 @@
 	int             surfaceNum;
 
 
-	ri.Printf(PRINT_ALL, "...creating BSP areas\n");
+	ri.Printf(PRINT_DEVELOPER, "...creating BSP areas\n");
 
 	// go through the leaves and count areas
 	maxArea = 0;
@@ -3504,10 +3504,10 @@
 
 		Com_DestroyGrowList(&areaSurfaces);
 
-		ri.Printf(PRINT_ALL, "area %i contains %i bsp surfaces\n", i, area->numMarkSurfaces);
-	}
-
-	ri.Printf(PRINT_ALL, "%i world areas created\n", numAreas);
+		ri.Printf(PRINT_DEVELOPER, "area %i contains %i bsp surfaces\n", i, area->numMarkSurfaces);
+	}
+
+	ri.Printf(PRINT_DEVELOPER, "%i world areas created\n", numAreas);
 }
 */
 
@@ -3849,7 +3849,7 @@
 
 		Com_DestroyGrowList(&vboSurfaces);
 
-		ri.Printf(PRINT_ALL, "%i VBO surfaces created for area %i\n", area->numVBOSurfaces, a);
+		ri.Printf(PRINT_DEVELOPER, "%i VBO surfaces created for area %i\n", area->numVBOSurfaces, a);
 	}
 }
 */
@@ -3872,7 +3872,7 @@
 	int             surfaceNum;
 	vec3_t          mins, maxs;
 
-	ri.Printf(PRINT_ALL, "...creating BSP clusters\n");
+	ri.Printf(PRINT_DEVELOPER, "...creating BSP clusters\n");
 
 	if(s_worldData.vis)
 	{
@@ -3970,7 +3970,7 @@
 			cluster->origin[1] = (mins[1] + maxs[1]) / 2;
 			cluster->origin[2] = (mins[2] + maxs[2]) / 2;
 
-			//ri.Printf(PRINT_ALL, "cluster %i origin at (%i %i %i)\n", i, (int)cluster->origin[0], (int)cluster->origin[1], (int)cluster->origin[2]);
+			//ri.Printf(PRINT_DEVELOPER, "cluster %i origin at (%i %i %i)\n", i, (int)cluster->origin[0], (int)cluster->origin[1], (int)cluster->origin[2]);
 
 			// move cluster surfaces list to hunk
 			cluster->numMarkSurfaces = clusterSurfaces.currentElements;
@@ -3983,7 +3983,7 @@
 
 			Com_DestroyGrowList(&clusterSurfaces);
 
-			//ri.Printf(PRINT_ALL, "cluster %i contains %i bsp surfaces\n", i, cluster->numMarkSurfaces);
+			//ri.Printf(PRINT_DEVELOPER, "cluster %i contains %i bsp surfaces\n", i, cluster->numMarkSurfaces);
 		}
 	}
 	else
@@ -4018,9 +4018,9 @@
 		Com_InitGrowList(&s_worldData.clusterVBOSurfaces[i], 100);
 	}
 
-	//ri.Printf(PRINT_ALL, "noVis cluster contains %i bsp surfaces\n", cluster->numMarkSurfaces);
-
-	ri.Printf(PRINT_ALL, "%i world clusters created\n", numClusters + 1);
+	//ri.Printf(PRINT_DEVELOPER, "noVis cluster contains %i bsp surfaces\n", cluster->numMarkSurfaces);
+
+	ri.Printf(PRINT_DEVELOPER, "%i world clusters created\n", numClusters + 1);
 
 
 	// reset surfaces' viewCount
@@ -4058,7 +4058,7 @@
 
 	srfVert_t      *yDrawVerts;
 
-	ri.Printf(PRINT_ALL, "smoothing normals for mesh '%s'\n", name);
+	ri.Printf(PRINT_DEVELOPER, "smoothing normals for mesh '%s'\n", name);
 
 	yDrawVerts = Com_Allocate(numTotalVerts * sizeof(srfVert_t));
 	memcpy(yDrawVerts, verts, numTotalVerts * sizeof(srfVert_t));
@@ -4124,7 +4124,7 @@
 		if(f != fOld)
 		{
 			fOld = f;
-			ri.Printf(PRINT_ALL, "%i...", f);
+			ri.Printf(PRINT_DEVELOPER, "%i...", f);
 		}
 
 		// already smoothed?
@@ -4214,7 +4214,7 @@
 	Com_Dealloc(smoothed);
 
 	endTime = ri.Milliseconds();
-	ri.Printf(PRINT_ALL, " (%5.2f seconds)\n", (endTime - startTime) / 1000.0);
+	ri.Printf(PRINT_DEVELOPER, " (%5.2f seconds)\n", (endTime - startTime) / 1000.0);
 }
 #endif
 
@@ -4283,7 +4283,7 @@
 	if(!numVerts || !numTriangles)
 		return;
 
-	ri.Printf(PRINT_ALL, "...calculating world VBO ( %i verts %i tris )\n", numVerts, numTriangles);
+	ri.Printf(PRINT_DEVELOPER, "...calculating world VBO ( %i verts %i tris )\n", numVerts, numTriangles);
 
 	// create arrays
 
@@ -4448,7 +4448,7 @@
 	s_worldData.ibo = R_CreateIBO2(va("staticBspModel0_IBO %i", 0), numTriangles, triangles, VBO_USAGE_STATIC);
 
 	endTime = ri.Milliseconds();
-	ri.Printf(PRINT_ALL, "world VBO calculation time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
+	ri.Printf(PRINT_DEVELOPER, "world VBO calculation time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
 
 
 	// point triangle surfaces to world VBO
@@ -4507,7 +4507,7 @@
 
 	if(s_worldData.redundantVertsCalculationNeeded)
 	{
-		ri.Printf(PRINT_ALL, "...calculating redundant world vertices ( %i verts )\n", numVerts);
+		ri.Printf(PRINT_DEVELOPER, "...calculating redundant world vertices ( %i verts )\n", numVerts);
 
 		s_worldData.redundantLightVerts = ri.Hunk_Alloc(numVerts * sizeof(int), h_low);
 		BuildRedundantIndices(numVerts, verts, s_worldData.redundantLightVerts, CompareLightVert);
@@ -4520,7 +4520,7 @@
 	}
 
 	endTime = ri.Milliseconds();
-	ri.Printf(PRINT_ALL, "redundant world vertices calculation time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
+	ri.Printf(PRINT_DEVELOPER, "redundant world vertices calculation time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
 #endif
 
 	//ri.Hunk_FreeTempMemory(triangles);
@@ -4872,7 +4872,7 @@
 
 		Com_DestroyGrowList(&vboSurfaces);
 
-		ri.Printf(PRINT_ALL, "%i VBO surfaces created for BSP submodel %i\n", model->numVBOSurfaces, m);
+		ri.Printf(PRINT_DEVELOPER, "%i VBO surfaces created for BSP submodel %i\n", model->numVBOSurfaces, m);
 	}
 }
 
@@ -4891,7 +4891,7 @@
 	int             numFaces, numMeshes, numTriSurfs, numFlares, numFoliages;
 	int             i;
 
-	ri.Printf(PRINT_ALL, "...loading surfaces\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading surfaces\n");
 
 	numFaces = 0;
 	numMeshes = 0;
@@ -4947,7 +4947,7 @@
 		}
 	}
 
-	ri.Printf(PRINT_ALL, "...loaded %d faces, %i meshes, %i trisurfs, %i flares %i foliages\n", numFaces, numMeshes, numTriSurfs,
+	ri.Printf(PRINT_DEVELOPER, "...loaded %d faces, %i meshes, %i trisurfs, %i flares %i foliages\n", numFaces, numMeshes, numTriSurfs,
 			  numFlares, numFoliages);
 
 	if(r_stitchCurves->integer)
@@ -4976,7 +4976,7 @@
 	bspModel_t     *out;
 	int             i, j, count;
 
-	ri.Printf(PRINT_ALL, "...loading submodels\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading submodels\n");
 
 	in = (void *)(fileBase + l->fileofs);
 	if(l->filelen % sizeof(*in))
@@ -5042,7 +5042,7 @@
 		node->sameAABBAsParent = VectorCompare(node->mins, parent->mins) && VectorCompare(node->maxs, parent->maxs);
 		if(node->sameAABBAsParent)
 		{
-			//ri.Printf(PRINT_ALL, "node %i has same AABB as their parent\n", node - s_worldData.nodes);
+			//ri.Printf(PRINT_DEVELOPER, "node %i has same AABB as their parent\n", node - s_worldData.nodes);
 		}
 		*/
 
@@ -5101,7 +5101,7 @@
 	vec3_t			mins, maxs;
 //	vec3_t			offset = {0.01, 0.01, 0.01};
 
-	ri.Printf(PRINT_ALL, "...loading nodes and leaves\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading nodes and leaves\n");
 
 	in = (void *)(fileBase + nodeLump->fileofs);
 	if(nodeLump->filelen % sizeof(dnode_t) || leafLump->filelen % sizeof(dleaf_t))
@@ -5280,7 +5280,7 @@
 	int             i, count;
 	dshader_t      *in, *out;
 
-	ri.Printf(PRINT_ALL, "...loading shaders\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading shaders\n");
 
 	in = (void *)(fileBase + l->fileofs);
 	if(l->filelen % sizeof(*in))
@@ -5314,7 +5314,7 @@
 	int            *in;
 	bspSurface_t  **out;
 
-	ri.Printf(PRINT_ALL, "...loading mark surfaces\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading mark surfaces\n");
 
 	in = (void *)(fileBase + l->fileofs);
 	if(l->filelen % sizeof(*in))
@@ -5346,7 +5346,7 @@
 	int             count;
 	int             bits;
 
-	ri.Printf(PRINT_ALL, "...loading planes\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading planes\n");
 
 	in = (void *)(fileBase + l->fileofs);
 	if(l->filelen % sizeof(*in))
@@ -5394,7 +5394,7 @@
 	int             pos[3];
 	float           posFloat[3];
 
-	ri.Printf(PRINT_ALL, "...loading light grid\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading light grid\n");
 
 	w = &s_worldData;
 
@@ -5414,9 +5414,9 @@
 
 	w->numLightGridPoints = w->lightGridBounds[0] * w->lightGridBounds[1] * w->lightGridBounds[2];
 
-	ri.Printf(PRINT_ALL, "grid size (%i %i %i)\n", (int)w->lightGridSize[0], (int)w->lightGridSize[1],
+	ri.Printf(PRINT_DEVELOPER, "grid size (%i %i %i)\n", (int)w->lightGridSize[0], (int)w->lightGridSize[1],
 				  (int)w->lightGridSize[2]);
-	ri.Printf(PRINT_ALL, "grid bounds (%i %i %i)\n", (int)w->lightGridBounds[0], (int)w->lightGridBounds[1],
+	ri.Printf(PRINT_DEVELOPER, "grid bounds (%i %i %i)\n", (int)w->lightGridBounds[0], (int)w->lightGridBounds[1],
 				  (int)w->lightGridBounds[2]);
 
 	if(l->filelen != w->numLightGridPoints * sizeof(dgridPoint_t))
@@ -5490,7 +5490,7 @@
 
 #if 0
 		// debug print to see if the XBSP format is correct
-		ri.Printf(PRINT_ALL, "%9d Amb: (%03.1f %03.1f %03.1f) Dir: (%03.1f %03.1f %03.1f)\n",
+		ri.Printf(PRINT_DEVELOPER, "%9d Amb: (%03.1f %03.1f %03.1f) Dir: (%03.1f %03.1f %03.1f)\n",
 			  i, gridPoint->ambient[0], gridPoint->ambient[1], gridPoint->ambient[2], gridPoint->directed[0], gridPoint->directed[1], gridPoint->directed[2]);
 #endif
 
@@ -5527,7 +5527,7 @@
 		}
 	}
 
-	ri.Printf(PRINT_ALL, "%i light grid points created\n", w->numLightGridPoints);
+	ri.Printf(PRINT_DEVELOPER, "%i light grid points created\n", w->numLightGridPoints);
 }
 
 /*
@@ -5550,7 +5550,7 @@
 	int             numParallelLights = 0;
 	trRefLight_t   *light;
 
-	ri.Printf(PRINT_ALL, "...loading entities\n");
+	ri.Printf(PRINT_DEVELOPER, "...loading entities\n");
 
 	w = &s_worldData;
 	w->lightGridSize[0] = 64;
@@ -5667,7 +5667,7 @@
 		// check for deluxe mapping support
 		if(!Q_stricmp(keyname, "deluxeMapping") && !Q_stricmp(value, "1"))
 		{
-			ri.Printf(PRINT_ALL, "map features directional light mapping\n");
+			ri.Printf(PRINT_DEVELOPER, "map features directional light mapping\n");
 			tr.worldDeluxeMapping = qtrue;
 			continue;
 		}
@@ -5685,7 +5685,7 @@
 			s = strstr(value, "-deluxe");
 			if(s)
 			{
-				ri.Printf(PRINT_ALL, "map features directional light mapping\n");
+				ri.Printf(PRINT_DEVELOPER, "map features directional light mapping\n");
 				tr.worldDeluxeMapping = qtrue;
 			}
 			continue;
@@ -5695,7 +5695,7 @@
 		// check for HDR light mapping support
 		if(!Q_stricmp(keyname, "hdrRGBE") && !Q_stricmp(value, "1"))
 		{
-			ri.Printf(PRINT_ALL, "map features HDR light mapping\n");
+			ri.Printf(PRINT_DEVELOPER, "map features HDR light mapping\n");
 			tr.worldHDR_RGBE = qtrue;
 			continue;
 		}
@@ -5707,7 +5707,7 @@
 		}
 	}
 
-//  ri.Printf(PRINT_ALL, "-----------\n%s\n----------\n", p);
+//  ri.Printf(PRINT_DEVELOPER, "-----------\n%s\n----------\n", p);
 
 	pOld = p;
 	numEntities = 1;			// parsed worldspawn so far
@@ -5784,8 +5784,8 @@
 		numEntities++;
 	}
 
-	ri.Printf(PRINT_ALL, "%i total entities counted\n", numEntities);
-	ri.Printf(PRINT_ALL, "%i total lights counted\n", numLights);
+	ri.Printf(PRINT_DEVELOPER, "%i total entities counted\n", numEntities);
+	ri.Printf(PRINT_DEVELOPER, "%i total lights counted\n", numLights);
 
 	s_worldData.numLights = numLights;
 
@@ -6051,11 +6051,11 @@
 		ri.Error(ERR_DROP, "counted %i lights and parsed %i lights", s_worldData.numLights, (numOmniLights + numProjLights + numParallelLights));
 	}
 
-	ri.Printf(PRINT_ALL, "%i total entities parsed\n", numEntities);
-	ri.Printf(PRINT_ALL, "%i total lights parsed\n", numOmniLights + numProjLights);
-	ri.Printf(PRINT_ALL, "%i omni-directional lights parsed\n", numOmniLights);
-	ri.Printf(PRINT_ALL, "%i projective lights parsed\n", numProjLights);
-	ri.Printf(PRINT_ALL, "%i directional lights parsed\n", numParallelLights);
+	ri.Printf(PRINT_DEVELOPER, "%i total entities parsed\n", numEntities);
+	ri.Printf(PRINT_DEVELOPER, "%i total lights parsed\n", numOmniLights + numProjLights);
+	ri.Printf(PRINT_DEVELOPER, "%i omni-directional lights parsed\n", numOmniLights);
+	ri.Printf(PRINT_DEVELOPER, "%i projective lights parsed\n", numProjLights);
+	ri.Printf(PRINT_DEVELOPER, "%i directional lights parsed\n", numParallelLights);
 }
 
 
@@ -7024,7 +7024,7 @@
 			if(!numVerts || !numTriangles)
 				continue;
 
-			//ri.Printf(PRINT_ALL, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
+			//ri.Printf(PRINT_DEVELOPER, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
 
 			// create surface
 			vboSurf = ri.Hunk_Alloc(sizeof(*vboSurf), h_low);
@@ -7375,7 +7375,7 @@
 			if(!numVerts || !numTriangles)
 				continue;
 
-			//ri.Printf(PRINT_ALL, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
+			//ri.Printf(PRINT_DEVELOPER, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
 
 			// create surface
 			vboSurf = ri.Hunk_Alloc(sizeof(*vboSurf), h_low);
@@ -7713,7 +7713,7 @@
 				if(!numVerts || !numTriangles)
 					continue;
 
-				//ri.Printf(PRINT_ALL, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
+				//ri.Printf(PRINT_DEVELOPER, "...calculating light mesh VBOs ( %s, %i verts %i tris )\n", shader->name, vertexesNum, indexesNum / 3);
 
 				// create surface
 				vboSurf = ri.Hunk_Alloc(sizeof(*vboSurf), h_low);
@@ -8173,7 +8173,7 @@
 		numShadowIndexes += 6;
 	}
 
-	//ri.Printf(PRINT_ALL, "...calculating shadow volume VBOs %i verts %i tris\n", numLightVerts * 2, numShadowIndexes / 3);
+	//ri.Printf(PRINT_DEVELOPER, "...calculating shadow volume VBOs %i verts %i tris\n", numLightVerts * 2, numShadowIndexes / 3);
 
 	// create surface
 	shadowSurf = ri.Hunk_Alloc(sizeof(*shadowSurf), h_low);
@@ -8347,7 +8347,7 @@
 	c_vboLightSurfaces = 0;
 	c_vboShadowSurfaces = 0;
 
-	ri.Printf(PRINT_ALL, "...precaching %i lights\n", s_worldData.numLights);
+	ri.Printf(PRINT_DEVELOPER, "...precaching %i lights\n", s_worldData.numLights);
 
 	for(i = 0; i < s_worldData.numLights; i++)
 	{
@@ -8357,7 +8357,7 @@
 			continue;
 
 #if 0
-		ri.Printf(PRINT_ALL, "light %i: origin(%i %i %i) radius(%i %i %i) color(%f %f %f)\n",
+		ri.Printf(PRINT_DEVELOPER, "light %i: origin(%i %i %i) radius(%i %i %i) color(%f %f %f)\n",
 				  i,
 				  (int)light->l.origin[0], (int)light->l.origin[1], (int)light->l.origin[2],
 				  (int)light->l.radius[0], (int)light->l.radius[1], (int)light->l.radius[2],
@@ -8400,7 +8400,7 @@
 		s_lightCount++;
 		QueueInit(&light->leafs);
 		R_RecursiveAddInteractionNode(s_worldData.nodes, light);
-		//ri.Printf(PRINT_ALL, "light %i touched %i leaves\n", i, QueueSize(&light->leafs));
+		//ri.Printf(PRINT_DEVELOPER, "light %i touched %i leaves\n", i, QueueSize(&light->leafs));
 
 #if 0
 		// Tr3b: this can cause really bad shadow problems :/
@@ -8437,21 +8437,21 @@
 	Com_DestroyGrowList(&s_interactions);
 
 
-	ri.Printf(PRINT_ALL, "%i interactions precached\n", s_worldData.numInteractions);
-	ri.Printf(PRINT_ALL, "%i interactions were hidden in shadows\n", c_redundantInteractions);
+	ri.Printf(PRINT_DEVELOPER, "%i interactions precached\n", s_worldData.numInteractions);
+	ri.Printf(PRINT_DEVELOPER, "%i interactions were hidden in shadows\n", c_redundantInteractions);
 
 	if(r_shadows->integer >= SHADOWING_VSM16)
 	{
 		// only interesting for omni-directional shadow mapping
-		ri.Printf(PRINT_ALL, "%i omni pyramid tests\n", tr.pc.c_pyramidTests);
-		ri.Printf(PRINT_ALL, "%i omni pyramid surfaces visible\n", tr.pc.c_pyramid_cull_ent_in);
-		ri.Printf(PRINT_ALL, "%i omni pyramid surfaces clipped\n", tr.pc.c_pyramid_cull_ent_clip);
-		ri.Printf(PRINT_ALL, "%i omni pyramid surfaces culled\n", tr.pc.c_pyramid_cull_ent_out);
+		ri.Printf(PRINT_DEVELOPER, "%i omni pyramid tests\n", tr.pc.c_pyramidTests);
+		ri.Printf(PRINT_DEVELOPER, "%i omni pyramid surfaces visible\n", tr.pc.c_pyramid_cull_ent_in);
+		ri.Printf(PRINT_DEVELOPER, "%i omni pyramid surfaces clipped\n", tr.pc.c_pyramid_cull_ent_clip);
+		ri.Printf(PRINT_DEVELOPER, "%i omni pyramid surfaces culled\n", tr.pc.c_pyramid_cull_ent_out);
 	}
 
 	endTime = ri.Milliseconds();
 
-	ri.Printf(PRINT_ALL, "lights precaching time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
+	ri.Printf(PRINT_DEVELOPER, "lights precaching time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
 }
 
 
@@ -8780,10 +8780,10 @@
 
 		numGridPoints = tr.world->lightGridBounds[0] * tr.world->lightGridBounds[1] * tr.world->lightGridBounds[2];
 
-		ri.Printf(PRINT_ALL, "...trying to allocate %d cubemaps", numGridPoints);
-		ri.Printf(PRINT_ALL, " with gridsize (%i %i %i)", (int)tr.world->lightGridSize[0], (int)tr.world->lightGridSize[1],
+		ri.Printf(PRINT_DEVELOPER, "...trying to allocate %d cubemaps", numGridPoints);
+		ri.Printf(PRINT_DEVELOPER, " with gridsize (%i %i %i)", (int)tr.world->lightGridSize[0], (int)tr.world->lightGridSize[1],
 				  (int)tr.world->lightGridSize[2]);
-		ri.Printf(PRINT_ALL, " and gridbounds (%i %i %i)\n", (int)tr.world->lightGridBounds[0], (int)tr.world->lightGridBounds[1],
+		ri.Printf(PRINT_DEVELOPER, " and gridbounds (%i %i %i)\n", (int)tr.world->lightGridBounds[0], (int)tr.world->lightGridBounds[1],
 				  (int)tr.world->lightGridBounds[2]);
 
 		for(i = 0; i < tr.world->lightGridBounds[0]; i += 1)
@@ -8834,22 +8834,22 @@
 		VectorClear(cubeProbe->origin);
 	}
 
-	ri.Printf(PRINT_ALL, "...pre-rendering %d cubemaps\n", tr.cubeProbes.currentElements);
+	ri.Printf(PRINT_DEVELOPER, "...pre-rendering %d cubemaps\n", tr.cubeProbes.currentElements);
 	for(j = 0; j < tr.cubeProbes.currentElements; j++)
 	{
 		cubeProbe = Com_GrowListElement(&tr.cubeProbes, j);
 
-		//ri.Printf(PRINT_ALL, "rendering cubemap at (%i %i %i)\n", (int)cubeProbe->origin[0], (int)cubeProbe->origin[1],
+		//ri.Printf(PRINT_DEVELOPER, "rendering cubemap at (%i %i %i)\n", (int)cubeProbe->origin[0], (int)cubeProbe->origin[1],
 		//		  (int)cubeProbe->origin[2]);
 
 		if(tr.cubeProbes.currentElements > 10 &&  ((j % (tr.cubeProbes.currentElements / 10)) == 0))
 		{
-			ri.Printf(PRINT_ALL, "%i", progress);
+			ri.Printf(PRINT_DEVELOPER, "%i", progress);
 			progress += 10;
 		}
 		else if(tr.cubeProbes.currentElements > 100 &&  ((j % (tr.cubeProbes.currentElements / 100)) == 0))
 		{
-			ri.Printf(PRINT_ALL, ".");
+			ri.Printf(PRINT_DEVELOPER, ".");
 			ri.Cmd_ExecuteText(EXEC_NOW, "updatescreen\n");
 		}
 		
@@ -9079,7 +9079,7 @@
 				{
 					// File is full, write it
 					fileName = va("maps/%s/cm_%04d.png", s_worldData.baseName, fileCount);
-					ri.Printf(PRINT_ALL, "\nwriting %s\n", fileName);
+					ri.Printf(PRINT_DEVELOPER, "\nwriting %s\n", fileName);
 					ri.FS_WriteFile(fileName, fileBuf, 1);	// create path
 					SavePNG(fileName, fileBuf, REF_CUBEMAP_STORE_SIZE, REF_CUBEMAP_STORE_SIZE, 4, qfalse);
 
@@ -9115,17 +9115,17 @@
 		qglBindTexture(cubeProbe->cubemap->type, 0);
 #endif
 	}
-	ri.Printf(PRINT_ALL, "\n");
+	ri.Printf(PRINT_DEVELOPER, "\n");
 
 	// write buffer if theres any still unwritten
 	if(fileBufX != 0 || fileBufY != 0)
 	{
 		fileName = va("maps/%s/cm_%04d.png", s_worldData.baseName, fileCount);
-		ri.Printf(PRINT_ALL, "writing %s\n", fileName);
+		ri.Printf(PRINT_DEVELOPER, "writing %s\n", fileName);
 		ri.FS_WriteFile(fileName, fileBuf, 1);	// create path
 		SavePNG(fileName, fileBuf, REF_CUBEMAP_STORE_SIZE, REF_CUBEMAP_STORE_SIZE, 4, qfalse);
 	}
-	ri.Printf(PRINT_ALL, "Wrote %d cubemaps in %d files.\n", j, fileCount+1);
+	ri.Printf(PRINT_DEVELOPER, "Wrote %d cubemaps in %d files.\n", j, fileCount+1);
 	ri.Free(fileBuf);
 
 	// turn pixel targets off
@@ -9180,7 +9180,7 @@
 #endif
 
 	endTime = ri.Milliseconds();
-	ri.Printf(PRINT_ALL, "cubemap probes pre-rendering time of %i cubes = %5.2f seconds\n", tr.cubeProbes.currentElements,
+	ri.Printf(PRINT_DEVELOPER, "cubemap probes pre-rendering time of %i cubes = %5.2f seconds\n", tr.cubeProbes.currentElements,
 			  (endTime - startTime) / 1000.0);
 
 #endif
@@ -9205,7 +9205,7 @@
 		ri.Error(ERR_DROP, "ERROR: attempted to redundantly load world map\n");
 	}
 
-	ri.Printf(PRINT_ALL, "----- RE_LoadWorldMap( %s ) -----\n", name);
+	ri.Printf(PRINT_DEVELOPER, "----- RE_LoadWorldMap( %s ) -----\n", name);
 
 	// set default sun direction to be used if it isn't
 	// overridden by a shader
@@ -9282,7 +9282,7 @@
 
 	s_worldData.dataSize = (byte *) ri.Hunk_Alloc(0, h_low) - startMarker;
 
-	//ri.Printf(PRINT_ALL, "total world data size: %d.%02d MB\n", s_worldData.dataSize / (1024 * 1024),
+	//ri.Printf(PRINT_DEVELOPER, "total world data size: %d.%02d MB\n", s_worldData.dataSize / (1024 * 1024),
 	//        (s_worldData.dataSize % (1024 * 1024)) * 100 / (1024 * 1024));
 
 	// only set tr.world now that we know the entire level has loaded properly
diff -r 09259b3d097d code/renderer/tr_init.c
--- code/renderer/tr_init.c	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/tr_init.c	Tue Mar 15 18:55:52 2011 -0700
@@ -694,7 +694,7 @@
 
 	if(ri.Cmd_Argc() == 2)
 	{
-		Com_sprintf(fileName, sizeof(fileName), "screenshots/etxreal-%s.%s", ri.Cmd_Argv(1), name);
+		Com_sprintf(fileName, sizeof(fileName), "screenshots/dstorm-%s.%s", ri.Cmd_Argv(1), name);
 	}
 	else
 	{
@@ -705,7 +705,7 @@
 		// scan for a free filename
 		for(lastNumber = 0; lastNumber <= 999; lastNumber++)
 		{
-			Com_sprintf(fileName, sizeof(fileName), "screenshots/etxreal-%04d%02d%02d-%02d%02d%02d-%03d.%s",
+			Com_sprintf(fileName, sizeof(fileName), "screenshots/dstorm-%04d%02d%02d-%02d%02d%02d-%03d.%s",
 						1900 + t.tm_year, 1 + t.tm_mon, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec, lastNumber, name);
 
 			if(!ri.FS_FileExists(fileName))
diff -r 09259b3d097d code/renderer/tr_model.c
--- code/renderer/tr_model.c	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/tr_model.c	Tue Mar 15 18:55:52 2011 -0700
@@ -101,7 +101,7 @@
 
 	if(!name || !name[0])
 	{
-		ri.Printf(PRINT_ALL, "RE_RegisterModel: NULL name\n");
+		ri.Printf(PRINT_DEVELOPER, "RE_RegisterModel: NULL name\n");
 		return 0;
 	}
 
@@ -324,7 +324,7 @@
 	xmlInitParser();
 	xmlSetGenericErrorFunc(NULL, R_XMLError);
 
-	ri.Printf(PRINT_ALL, "...loading DAE '%s'\n", modName);
+	ri.Printf(PRINT_DEVELOPER, "...loading DAE '%s'\n", modName);
 
 	doc = xmlParseMemory(buffer, bufferLen);
 	if(doc == NULL)
@@ -352,7 +352,7 @@
 
 	xmlFreeDoc(doc);
 
-	ri.Printf(PRINT_ALL, "...finished DAE '%s'\n", modName);
+	ri.Printf(PRINT_DEVELOPER, "...finished DAE '%s'\n", modName);
 
 	return qfalse;
 }
@@ -461,34 +461,34 @@
 					mdvModel = mod->mdv[j];
 
 					total++;
-					ri.Printf(PRINT_ALL, "%d.%02d MB '%s' LOD = %i\n",	mod->dataSize / (1024 * 1024), 
+					ri.Printf(PRINT_DEVELOPER, "%d.%02d MB '%s' LOD = %i\n",	mod->dataSize / (1024 * 1024), 
 															(mod->dataSize % (1024 * 1024)) * 100 / (1024 * 1024),
 															mod->name, j);
 
 					if(showFrames && mdvModel->numFrames > 1)
 					{
-						ri.Printf(PRINT_ALL, "\tnumSurfaces = %i\n", mdvModel->numSurfaces);
-						ri.Printf(PRINT_ALL, "\tnumFrames = %i\n", mdvModel->numFrames);
+						ri.Printf(PRINT_DEVELOPER, "\tnumSurfaces = %i\n", mdvModel->numSurfaces);
+						ri.Printf(PRINT_DEVELOPER, "\tnumFrames = %i\n", mdvModel->numFrames);
 						
 						for(k = 0, mdvSurface = mdvModel->surfaces; k < mdvModel->numSurfaces; k++, mdvSurface++)
 						{
-							ri.Printf(PRINT_ALL, "\t\tmesh = '%s'\n", mdvSurface->name);
-							ri.Printf(PRINT_ALL, "\t\t\tnumVertexes = %i\n", mdvSurface->numVerts);
-							ri.Printf(PRINT_ALL, "\t\t\tnumTriangles = %i\n", mdvSurface->numTriangles);
+							ri.Printf(PRINT_DEVELOPER, "\t\tmesh = '%s'\n", mdvSurface->name);
+							ri.Printf(PRINT_DEVELOPER, "\t\t\tnumVertexes = %i\n", mdvSurface->numVerts);
+							ri.Printf(PRINT_DEVELOPER, "\t\t\tnumTriangles = %i\n", mdvSurface->numTriangles);
 						}
 					}
 
-					ri.Printf(PRINT_ALL, "\t\tnumTags = %i\n", mdvModel->numTags);
+					ri.Printf(PRINT_DEVELOPER, "\t\tnumTags = %i\n", mdvModel->numTags);
 					for(k = 0, mdvTagName = mdvModel->tagNames; k < mdvModel->numTags; k++, mdvTagName++)
 					{
-						ri.Printf(PRINT_ALL, "\t\t\ttagName = '%s'\n", mdvTagName->name);
+						ri.Printf(PRINT_DEVELOPER, "\t\t\ttagName = '%s'\n", mdvTagName->name);
 					}
 				}
 			}
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "%d.%02d MB '%s'\n",	mod->dataSize / (1024 * 1024), 
+			ri.Printf(PRINT_DEVELOPER, "%d.%02d MB '%s'\n",	mod->dataSize / (1024 * 1024), 
 																(mod->dataSize % (1024 * 1024)) * 100 / (1024 * 1024),
 																mod->name);
 
@@ -498,14 +498,14 @@
 		totalDataSize += mod->dataSize;
 	}
 	
-	ri.Printf(PRINT_ALL, " %d.%02d MB total model memory\n", totalDataSize / (1024 * 1024),
+	ri.Printf(PRINT_DEVELOPER, " %d.%02d MB total model memory\n", totalDataSize / (1024 * 1024),
 			  (totalDataSize % (1024 * 1024)) * 100 / (1024 * 1024));
-	ri.Printf(PRINT_ALL, " %i total models\n\n", total);
+	ri.Printf(PRINT_DEVELOPER, " %i total models\n\n", total);
 
 #if	0							// not working right with new hunk
 	if(tr.world)
 	{
-		ri.Printf(PRINT_ALL, "\n%8i : %s\n", tr.world->dataSize, tr.world->name);
+		ri.Printf(PRINT_DEVELOPER, "\n%8i : %s\n", tr.world->dataSize, tr.world->name);
 	}
 #endif
 }
diff -r 09259b3d097d code/renderer/tr_shade.cpp
--- code/renderer/tr_shade.cpp	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/tr_shade.cpp	Tue Mar 15 18:55:52 2011 -0700
@@ -62,7 +62,7 @@
 	}
 	else
 	{
-		ri.Printf(PRINT_ALL, "compile log:\n");
+		ri.Printf(PRINT_DEVELOPER, "compile log:\n");
 	}
 
 	for(i = 0; i < maxLength; i += 1024)
@@ -72,7 +72,7 @@
 		if(developerOnly)
 			ri.Printf(PRINT_DEVELOPER, "%s\n", msgPart);
 		else
-			ri.Printf(PRINT_ALL, "%s\n", msgPart);
+			ri.Printf(PRINT_DEVELOPER, "%s\n", msgPart);
 	}
 
 	Com_Dealloc(msg);
@@ -94,7 +94,7 @@
 	for(i = 0; i < maxLength; i += 1024)
 	{
 		Q_strncpyz(msgPart, msg + i, sizeof(msgPart));
-		ri.Printf(PRINT_ALL, "%s\n", msgPart);
+		ri.Printf(PRINT_DEVELOPER, "%s\n", msgPart);
 	}
 
 	Com_Dealloc(msg);
@@ -134,7 +134,7 @@
 		if(shaderType == GL_VERTEX_SHADER_ARB)
 		{
 			Com_sprintf(filename, sizeof(filename), "glsl/%s_vp.glsl", token);
-			ri.Printf(PRINT_ALL, "...loading vertex shader '%s'\n", filename);
+			ri.Printf(PRINT_DEVELOPER, "...loading vertex shader '%s'\n", filename);
 		}
 		else
 		{
@@ -165,12 +165,12 @@
 	if(shaderType == GL_VERTEX_SHADER_ARB)
 	{
 		Com_sprintf(filename, sizeof(filename), "glsl/%s_vp.glsl", name);
-		ri.Printf(PRINT_ALL, "...loading vertex main() shader '%s'\n", filename);
+		ri.Printf(PRINT_DEVELOPER, "...loading vertex main() shader '%s'\n", filename);
 	}
 	else
 	{
 		Com_sprintf(filename, sizeof(filename), "glsl/%s_fp.glsl", name);
-		ri.Printf(PRINT_ALL, "...loading fragment main() shader '%s'\n", filename);
+		ri.Printf(PRINT_DEVELOPER, "...loading fragment main() shader '%s'\n", filename);
 	}
 
 	mainSize = ri.FS_ReadFile(filename, (void **)&mainBuffer);
@@ -576,7 +576,7 @@
 		sizeExtra = strlen(bufferExtra);
 		sizeFinal = sizeExtra + mainSize + libsSize;
 
-		//ri.Printf(PRINT_ALL, "GLSL extra: %s\n", bufferExtra);
+		//ri.Printf(PRINT_DEVELOPER, "GLSL extra: %s\n", bufferExtra);
 
 		bufferFinal = (char *) ri.Hunk_AllocateTempMemory(sizeFinal);
 
@@ -600,7 +600,7 @@
 			for(i = 0; i < sizeFinal; i += 1024)
 			{
 				Q_strncpyz(msgPart, bufferFinal + i, sizeof(msgPart));
-				ri.Printf(PRINT_ALL, "%s", msgPart);
+				ri.Printf(PRINT_DEVELOPER, "%s", msgPart);
 			}
 
 			ri.Printf(PRINT_WARNING, " END-- ---------------------------------------------------\n", filename);
@@ -637,7 +637,7 @@
 				for(i = 0; i < length; i += 1024)
 				{
 					Q_strncpyz(msgPart, newSource + i, sizeof(msgPart));
-					ri.Printf(PRINT_ALL, "%s\n", msgPart);
+					ri.Printf(PRINT_DEVELOPER, "%s\n", msgPart);
 				}
 
 				ri.Printf(PRINT_WARNING, " END-- ---------------------------------------------------\n", filename);
@@ -654,7 +654,7 @@
 				for(i = 0; i < length; i += 1024)
 				{
 					Q_strncpyz(msgPart, errorLog + i, sizeof(msgPart));
-					ri.Printf(PRINT_ALL, "%s\n", msgPart);
+					ri.Printf(PRINT_DEVELOPER, "%s\n", msgPart);
 				}
 
 				ri.Error(ERR_FATAL, "Couldn't optimize %s", filename);
@@ -692,7 +692,7 @@
 	}
 
 	GLSL_PrintInfoLog(shader, qtrue);
-	//ri.Printf(PRINT_ALL, "%s\n", GLSL_PrintShaderSource(shader));
+	//ri.Printf(PRINT_DEVELOPER, "%s\n", GLSL_PrintShaderSource(shader));
 
 	// attach shader to program
 	qglAttachObjectARB(program, shader);
@@ -920,7 +920,7 @@
 	static char     compileMacros[32000];
 //	shaderProgram_t *shaderProgram;
 
-	ri.Printf(PRINT_ALL, "------- GLSL_InitGPUShaders -------\n");
+	ri.Printf(PRINT_DEVELOPER, "------- GLSL_InitGPUShaders -------\n");
 
 	// make sure the render thread is stopped
 	R_SyncRenderThread();
@@ -2286,14 +2286,14 @@
 	glslopt_cleanup(s_glslOptimizer);
 #endif
 
-	ri.Printf(PRINT_ALL, "GLSL shaders load time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
+	ri.Printf(PRINT_DEVELOPER, "GLSL shaders load time = %5.2f seconds\n", (endTime - startTime) / 1000.0);
 }
 
 void GLSL_ShutdownGPUShaders(void)
 {
 //	int				i;
 
-	ri.Printf(PRINT_ALL, "------- GLSL_ShutdownGPUShaders -------\n");
+	ri.Printf(PRINT_DEVELOPER, "------- GLSL_ShutdownGPUShaders -------\n");
 
 	if(gl_genericShader)
 	{
diff -r 09259b3d097d code/renderer/tr_shader.c
--- code/renderer/tr_shader.c	Sat Mar 12 23:18:49 2011 -0500
+++ code/renderer/tr_shader.c	Tue Mar 15 18:55:52 2011 -0700
@@ -700,7 +700,7 @@
 
 		if(numInFixOps == MAX_EXPRESSION_OPS)
 		{
-			ri.Printf(PRINT_ALL, "WARNING: too many arithmetic expression operations in shader '%s'\n", shader.name);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: too many arithmetic expression operations in shader '%s'\n", shader.name);
 			Com_SkipRestOfLine(text);
 			return;
 		}
@@ -710,7 +710,7 @@
 		switch (op.type)
 		{
 			case OP_BAD:
-				ri.Printf(PRINT_ALL, "WARNING: unknown token '%s' for arithmetic expression in shader '%s'\n", token,
+				ri.Printf(PRINT_DEVELOPER, "WARNING: unknown token '%s' for arithmetic expression in shader '%s'\n", token,
 						  shader.name);
 				break;
 
@@ -765,7 +765,7 @@
 	}
 
 #if 0
-	ri.Printf(PRINT_ALL, "infix:\n");
+	ri.Printf(PRINT_DEVELOPER, "infix:\n");
 	for(i = 0; i < numInFixOps; i++)
 	{
 		op = inFixOps[i];
@@ -773,19 +773,19 @@
 		switch (op.type)
 		{
 			case OP_NUM:
-				ri.Printf(PRINT_ALL, "%f ", op.value);
+				ri.Printf(PRINT_DEVELOPER, "%f ", op.value);
 				break;
 
 			case OP_TABLE:
-				ri.Printf(PRINT_ALL, "%s ", tr.shaderTables[(int)op.value]->name);
+				ri.Printf(PRINT_DEVELOPER, "%s ", tr.shaderTables[(int)op.value]->name);
 				break;
 
 			default:
-				ri.Printf(PRINT_ALL, "%s ", opStrings[op.type].s);
+				ri.Printf(PRINT_DEVELOPER, "%s ", opStrings[op.type].s);
 				break;
 		}
 	}
-	ri.Printf(PRINT_ALL, "\n");
+	ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 
 	// http://cis.stvincent.edu/swd/stl/stacks/stacks.html
@@ -817,7 +817,7 @@
 			{
 				if(!numTmpOps)
 				{
-					ri.Printf(PRINT_ALL, "WARNING: invalid infix expression in shader '%s'\n", shader.name);
+					ri.Printf(PRINT_DEVELOPER, "WARNING: invalid infix expression in shader '%s'\n", shader.name);
 					return;
 				}
 				else
@@ -853,7 +853,7 @@
 			{
 				if(!numTmpOps)
 				{
-					ri.Printf(PRINT_ALL, "WARNING: invalid infix expression in shader '%s'\n", shader.name);
+					ri.Printf(PRINT_DEVELOPER, "WARNING: invalid infix expression in shader '%s'\n", shader.name);
 					return;
 				}
 				else
@@ -880,7 +880,7 @@
 	exp->active = qtrue;
 
 #if 0
-	ri.Printf(PRINT_ALL, "postfix:\n");
+	ri.Printf(PRINT_DEVELOPER, "postfix:\n");
 	for(i = 0; i < exp->numOps; i++)
 	{
 		op = exp->ops[i];
@@ -888,19 +888,19 @@
 		switch (op.type)
 		{
 			case OP_NUM:
-				ri.Printf(PRINT_ALL, "%f ", op.value);
+				ri.Printf(PRINT_DEVELOPER, "%f ", op.value);
 				break;
 
 			case OP_TABLE:
-				ri.Printf(PRINT_ALL, "%s ", tr.shaderTables[(int)op.value]->name);
+				ri.Printf(PRINT_DEVELOPER, "%s ", tr.shaderTables[(int)op.value]->name);
 				break;
 
 			default:
-				ri.Printf(PRINT_ALL, "%s ", opStrings[op.type].s);
+				ri.Printf(PRINT_DEVELOPER, "%s ", opStrings[op.type].s);
 				break;
 		}
 	}
-	ri.Printf(PRINT_ALL, "\n");
+	ri.Printf(PRINT_DEVELOPER, "\n");
 #endif
 }
 
@@ -1132,7 +1132,7 @@
 
 	token = Com_ParseExt(text, qfalse);
 
-//  ri.Printf(PRINT_ALL, "using tcMod '%s' in shader '%s'\n", token, shader.name);
+//  ri.Printf(PRINT_DEVELOPER, "using tcMod '%s' in shader '%s'\n", token, shader.name);
 
 	// turb
 	if(!Q_stricmp(token, "turb"))
@@ -1397,7 +1397,7 @@
 		return qfalse;
 	}
 
-//  ri.Printf(PRINT_ALL, "LoadMap: buffer '%s'\n", buffer);
+//  ri.Printf(PRINT_DEVELOPER, "LoadMap: buffer '%s'\n", buffer);
 
 	token = Com_ParseExt(&buffer_p, qfalse);
 
@@ -3218,7 +3218,7 @@
 		token = Com_ParseExt(&p, qtrue);
 		if(!Q_stricmp(token, guideName))
 		{
-			//ri.Printf(PRINT_ALL, "found guide '%s' by hashing\n", guideName);
+			//ri.Printf(PRINT_DEVELOPER, "found guide '%s' by hashing\n", guideName);
 			return p;
 		}
 	}
@@ -3250,7 +3250,7 @@
 
 		if(!Q_stricmp(token, guideName))
 		{
-			ri.Printf(PRINT_ALL, "found guide '%s' by linear search\n", guideName);
+			ri.Printf(PRINT_DEVELOPER, "found guide '%s' by linear search\n", guideName);
 			return p;
 		}
 
@@ -3338,11 +3338,11 @@
 
 			if(numGuideParms >= MAX_GUIDE_PARAMETERS - 1)
 			{
-				ri.Printf(PRINT_ALL, "WARNING: more than %i guide parameters are not allowed\n", MAX_GUIDE_PARAMETERS);
+				ri.Printf(PRINT_DEVELOPER, "WARNING: more than %i guide parameters are not allowed\n", MAX_GUIDE_PARAMETERS);
 				return NULL;
 			}
 
-			//ri.Printf(PRINT_ALL, "guide parameter %i = '%s'\n", numGuideParms, token);
+			//ri.Printf(PRINT_DEVELOPER, "guide parameter %i = '%s'\n", numGuideParms, token);
 
 			Q_strncpyz(guideParms[numGuideParms], token, MAX_QPATH);
 			numGuideParms++;
@@ -3350,7 +3350,7 @@
 
 		if(Q_stricmp(token, ")"))
 		{
-			ri.Printf(PRINT_ALL, "WARNING: expected ) found '%s'\n", token);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: expected ) found '%s'\n", token);
 			return NULL;
 		}
 
@@ -3360,7 +3360,7 @@
 		token = Com_ParseExt(&shaderText, qtrue);
 		if(Q_stricmp(token, "("))
 		{
-			ri.Printf(PRINT_ALL, "WARNING: expected ( found '%s'\n", token);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: expected ( found '%s'\n", token);
 			return NULL;
 		}
 
@@ -3376,11 +3376,11 @@
 
 			if(numShaderParms >= MAX_GUIDE_PARAMETERS - 1)
 			{
-				ri.Printf(PRINT_ALL, "WARNING: more than %i guide parameters are not allowed\n", MAX_GUIDE_PARAMETERS);
+				ri.Printf(PRINT_DEVELOPER, "WARNING: more than %i guide parameters are not allowed\n", MAX_GUIDE_PARAMETERS);
 				return NULL;
 			}
 
-			//ri.Printf(PRINT_ALL, "shader parameter %i = '%s'\n", numShaderParms, token);
+			//ri.Printf(PRINT_DEVELOPER, "shader parameter %i = '%s'\n", numShaderParms, token);
 
 			Q_strncpyz(shaderParms[numShaderParms], token, MAX_QPATH);
 			numShaderParms++;
@@ -3388,7 +3388,7 @@
 
 		if(Q_stricmp(token, ")"))
 		{
-			ri.Printf(PRINT_ALL, "WARNING: expected ) found '%s'\n", token);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: expected ) found '%s'\n", token);
 			return NULL;
 		}
 
@@ -3401,14 +3401,14 @@
 #if 0
 		for(i = 0; i < numGuideParms; i++)
 		{
-			ri.Printf(PRINT_ALL, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
+			ri.Printf(PRINT_DEVELOPER, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
 		}
 #endif
 
 		token = Com_ParseExt(&guideText, qtrue);
 		if(Q_stricmp(token, "{"))
 		{
-			ri.Printf(PRINT_ALL, "WARNING: expected { found '%s'\n", token);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: expected { found '%s'\n", token);
 			return NULL;
 		}
 
@@ -3438,7 +3438,7 @@
 			{
 				if((p = Q_stristr(name, (const char *)guideParms)))
 				{
-					//ri.Printf(PRINT_ALL, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
+					//ri.Printf(PRINT_DEVELOPER, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
 
 					Q_strreplace(name, sizeof(name), guideParms[i], shaderParms[i]);
 				}
@@ -3466,7 +3466,7 @@
 				{
 					if((p = Q_stristr(name, (const char *)guideParms)))
 					{
-						//ri.Printf(PRINT_ALL, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
+						//ri.Printf(PRINT_DEVELOPER, "guide parameter '%s' = '%s'\n", guideParms[i], shaderParms[i]);
 
 						Q_strreplace(name, sizeof(name), guideParms[i], shaderParms[i]);
 					}
@@ -3481,13 +3481,13 @@
 
 		if(Q_stricmp(token, "}"))
 		{
-			ri.Printf(PRINT_ALL, "WARNING: expected } found '%s'\n", token);
+			ri.Printf(PRINT_DEVELOPER, "WARNING: expected } found '%s'\n", token);
 			return NULL;
 		}
 
 		Q_strcat(buffer, sizeof(buffer), "}");
 
-		ri.Printf(PRINT_ALL, "----- '%s' -----\n%s\n----------\n", shader.name, buffer);
+		ri.Printf(PRINT_DEVELOPER, "----- '%s' -----\n%s\n----------\n", shader.name, buffer);
 
 		return buffer;
 	}
@@ -4252,7 +4252,7 @@
 	}
 #endif
 
-	//ri.Printf(PRINT_ALL, "...collapsing '%s'\n", shader.name);
+	//ri.Printf(PRINT_DEVELOPER, "...collapsing '%s'\n", shader.name);
 
 	Com_Memcpy(&tmpShader, &shader, sizeof(shader));
 
@@ -4329,7 +4329,7 @@
 			hasSpecularStage
 		)
 		{
-			//ri.Printf(PRINT_ALL, "lighting_DBS\n");
+			//ri.Printf(PRINT_DEVELOPER, "lighting_DBS\n");
 
 			tmpShader.collapseType = COLLAPSE_lighting_DBS;
 
@@ -4348,7 +4348,7 @@
 				hasNormalStage
 		)
 		{
-			//ri.Printf(PRINT_ALL, "lighting_DB\n");
+			//ri.Printf(PRINT_DEVELOPER, "lighting_DB\n");
 
 			tmpShader.collapseType = COLLAPSE_lighting_DB;
 
@@ -4366,7 +4366,7 @@
 				hasNormalStage
 		)
 		{
-			//ri.Printf(PRINT_ALL, "reflection_CB\n");
+			//ri.Printf(PRINT_DEVELOPER, "reflection_CB\n");
 
 			tmpShader.collapseType = COLLAPSE_reflection_CB;
 
@@ -4596,17 +4596,17 @@
 	newTable->numValues = numValues;
 	newTable->values = ri.Hunk_Alloc(sizeof(float) * numValues, h_low);
 
-//  ri.Printf(PRINT_ALL, "values: \n");
+//  ri.Printf(PRINT_DEVELOPER, "values: \n");
 	for(i = 0; i < numValues; i++)
 	{
 		newTable->values[i] = values[i];
 
-//      ri.Printf(PRINT_ALL, "%f", newTable->values[i]);
+//      ri.Printf(PRINT_DEVELOPER, "%f", newTable->values[i]);
 
 //      if(i != numValues -1)
-//          ri.Printf(PRINT_ALL, ", ");
-	}
-//  ri.Printf(PRINT_ALL, "\n");
+//          ri.Printf(PRINT_DEVELOPER, ", ");
+	}
+//  ri.Printf(PRINT_DEVELOPER, "\n");
 
 	hash = generateHashValue(newTable->name, MAX_SHADERTABLE_HASH);
 	newTable->next = shaderTableHashTable[hash];
@@ -4939,7 +4939,7 @@
 		dshader = dptr;
 	}
 
-//  ri.Printf( PRINT_ALL, "Loaded dynamic shader [%s] with shadertext [%s]\n", shadername, shadertext );
+//  ri.Printf( PRINT_DEVELOPER, "Loaded dynamic shader [%s] with shadertext [%s]\n", shadername, shadertext );
 
 	return qtrue;
 #else
@@ -4976,7 +4976,7 @@
 		token = Com_ParseExt(&p, qtrue);
 		if(!Q_stricmp(token, shaderName))
 		{
-			//ri.Printf(PRINT_ALL, "found shader '%s' by hashing\n", shaderName);
+			//ri.Printf(PRINT_DEVELOPER, "found shader '%s' by hashing\n", shaderName);
 			return p;
 		}
 	}
@@ -4999,7 +4999,7 @@
 
 		if(!Q_stricmp(token, shaderName))
 		{
-			//ri.Printf(PRINT_ALL, "found shader '%s' by linear search\n", shaderName);
+			//ri.Printf(PRINT_DEVELOPER, "found shader '%s' by linear search\n", shaderName);
 			return p;
 		}
 		// skip shader tables
@@ -5018,7 +5018,7 @@
 
 			if(!Q_stricmp(token, shaderName))
 			{
-				ri.Printf(PRINT_ALL, "found shader '%s' by linear search\n", shaderName);
+				ri.Printf(PRINT_DEVELOPER, "found shader '%s' by linear search\n", shaderName);
 				return p;
 			}
 
@@ -5186,7 +5186,7 @@
 		// of all explicit shaders
 		if(r_printShaders->integer)
 		{
-			ri.Printf(PRINT_ALL, "...loading explicit shader '%s'\n", strippedName);
+			ri.Printf(PRINT_DEVELOPER, "...loading explicit shader '%s'\n", strippedName);
 		}
 
 		if(!ParseShader(shaderText))
@@ -5493,7 +5493,7 @@
 	shader_t       *shader;
 	char           *s = NULL;
 
-	ri.Printf(PRINT_ALL, "-----------------------\n");
+	ri.Printf(PRINT_DEVELOPER, "-----------------------\n");
 
 	if(ri.Cmd_Argc() > 1)
 	{
@@ -5515,24 +5515,24 @@
 		if(s && Q_stricmpn(shader->name, s, strlen(s)) != 0)
 			continue;
 
-		ri.Printf(PRINT_ALL, "%i ", shader->numStages);
+		ri.Printf(PRINT_DEVELOPER, "%i ", shader->numStages);
 
 		switch (shader->type)
 		{
 			case SHADER_2D:
-				ri.Printf(PRINT_ALL, "2D   ");
+				ri.Printf(PRINT_DEVELOPER, "2D   ");
 				break;
 
 			case SHADER_3D_DYNAMIC:
-				ri.Printf(PRINT_ALL, "3D_D ");
+				ri.Printf(PRINT_DEVELOPER, "3D_D ");
 				break;
 
 			case SHADER_3D_STATIC:
-				ri.Printf(PRINT_ALL, "3D_S ");
+				ri.Printf(PRINT_DEVELOPER, "3D_S ");
 				break;
 
 			case SHADER_LIGHT:
-				ri.Printf(PRINT_ALL, "ATTN ");
+				ri.Printf(PRINT_DEVELOPER, "ATTN ");
 				break;
 		}
 
@@ -5541,158 +5541,158 @@
 		{
 			if(shader->collapseTextureEnv == GL_ADD)
 			{
-				ri.Printf(PRINT_ALL, "MT(a)          ");
+				ri.Printf(PRINT_DEVELOPER, "MT(a)          ");
 			}
 			else if(shader->collapseTextureEnv == GL_MODULATE)
 			{
-				ri.Printf(PRINT_ALL, "MT(m)          ");
+				ri.Printf(PRINT_DEVELOPER, "MT(m)          ");
 			}
 			else if(shader->collapseTextureEnv == GL_DECAL)
 			{
-				ri.Printf(PRINT_ALL, "MT(d)          ");
+				ri.Printf(PRINT_DEVELOPER, "MT(d)          ");
 			}
 		}
 		else */
 		if(shader->collapseType == COLLAPSE_lighting_DB)
 		{
-			ri.Printf(PRINT_ALL, "lighting_DB    ");
+			ri.Printf(PRINT_DEVELOPER, "lighting_DB    ");
 		}
 		else if(shader->collapseType == COLLAPSE_lighting_DBS)
 		{
-			ri.Printf(PRINT_ALL, "lighting_DBS   ");
+			ri.Printf(PRINT_DEVELOPER, "lighting_DBS   ");
 		}
 		else if(shader->collapseType == COLLAPSE_reflection_CB)
 		{
-			ri.Printf(PRINT_ALL, "reflection_CB  ");
+			ri.Printf(PRINT_DEVELOPER, "reflection_CB  ");
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "               ");
+			ri.Printf(PRINT_DEVELOPER, "               ");
 		}
 
 		if(shader->createdByGuide)
 		{
-			ri.Printf(PRINT_ALL, "G ");
+			ri.Printf(PRINT_DEVELOPER, "G ");
 		}
 		else if(shader->explicitlyDefined)
 		{
-			ri.Printf(PRINT_ALL, "E ");
+			ri.Printf(PRINT_DEVELOPER, "E ");
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "  ");
+			ri.Printf(PRINT_DEVELOPER, "  ");
 		}
 
 		if(shader->sort == SS_BAD)
 		{
-			ri.Printf(PRINT_ALL, "SS_BAD              ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BAD              ");
 		}
 		else if(shader->sort == SS_PORTAL)
 		{
-			ri.Printf(PRINT_ALL, "SS_PORTAL           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_PORTAL           ");
 		}
 		else if(shader->sort == SS_ENVIRONMENT)
 		{
-			ri.Printf(PRINT_ALL, "SS_ENVIRONMENT      ");
+			ri.Printf(PRINT_DEVELOPER, "SS_ENVIRONMENT      ");
 		}
 		else if(shader->sort == SS_OPAQUE)
 		{
-			ri.Printf(PRINT_ALL, "SS_OPAQUE           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_OPAQUE           ");
 		}
 		else if(shader->sort == SS_DECAL)
 		{
-			ri.Printf(PRINT_ALL, "SS_DECAL            ");
+			ri.Printf(PRINT_DEVELOPER, "SS_DECAL            ");
 		}
 		else if(shader->sort == SS_SEE_THROUGH)
 		{
-			ri.Printf(PRINT_ALL, "SS_SEE_THROUGH      ");
+			ri.Printf(PRINT_DEVELOPER, "SS_SEE_THROUGH      ");
 		}
 		else if(shader->sort == SS_BANNER)
 		{
-			ri.Printf(PRINT_ALL, "SS_BANNER           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BANNER           ");
 		}
 		else if(shader->sort == SS_FOG)
 		{
-			ri.Printf(PRINT_ALL, "SS_FOG              ");
+			ri.Printf(PRINT_DEVELOPER, "SS_FOG              ");
 		}
 		else if(shader->sort == SS_UNDERWATER)
 		{
-			ri.Printf(PRINT_ALL, "SS_UNDERWATER       ");
+			ri.Printf(PRINT_DEVELOPER, "SS_UNDERWATER       ");
 		}
 		else if(shader->sort == SS_WATER)
 		{
-			ri.Printf(PRINT_ALL, "SS_WATER            ");
+			ri.Printf(PRINT_DEVELOPER, "SS_WATER            ");
 		}
 		else if(shader->sort == SS_FAR)
 		{
-			ri.Printf(PRINT_ALL, "SS_FAR              ");
+			ri.Printf(PRINT_DEVELOPER, "SS_FAR              ");
 		}
 		else if(shader->sort == SS_MEDIUM)
 		{
-			ri.Printf(PRINT_ALL, "SS_MEDIUM           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_MEDIUM           ");
 		}
 		else if(shader->sort == SS_CLOSE)
 		{
-			ri.Printf(PRINT_ALL, "SS_CLOSE            ");
+			ri.Printf(PRINT_DEVELOPER, "SS_CLOSE            ");
 		}
 		else if(shader->sort == SS_BLEND0)
 		{
-			ri.Printf(PRINT_ALL, "SS_BLEND0           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BLEND0           ");
 		}
 		else if(shader->sort == SS_BLEND1)
 		{
-			ri.Printf(PRINT_ALL, "SS_BLEND1           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BLEND1           ");
 		}
 		else if(shader->sort == SS_BLEND2)
 		{
-			ri.Printf(PRINT_ALL, "SS_BLEND2           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BLEND2           ");
 		}
 		else if(shader->sort == SS_BLEND3)
 		{
-			ri.Printf(PRINT_ALL, "SS_BLEND3           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BLEND3           ");
 		}
 		else if(shader->sort == SS_BLEND6)
 		{
-			ri.Printf(PRINT_ALL, "SS_BLEND6           ");
+			ri.Printf(PRINT_DEVELOPER, "SS_BLEND6           ");
 		}
 		else if(shader->sort == SS_ALMOST_NEAREST)
 		{
-			ri.Printf(PRINT_ALL, "SS_ALMOST_NEAREST   ");
+			ri.Printf(PRINT_DEVELOPER, "SS_ALMOST_NEAREST   ");
 		}
 		else if(shader->sort == SS_NEAREST)
 		{
-			ri.Printf(PRINT_ALL, "SS_NEAREST          ");
+			ri.Printf(PRINT_DEVELOPER, "SS_NEAREST          ");
 		}
 		else if(shader->sort == SS_POST_PROCESS)
 		{
-			ri.Printf(PRINT_ALL, "SS_POST_PROCESS     ");
+			ri.Printf(PRINT_DEVELOPER, "SS_POST_PROCESS     ");
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "                    ");
+			ri.Printf(PRINT_DEVELOPER, "                    ");
 		}
 
 		if(shader->interactLight)
 		{
-			ri.Printf(PRINT_ALL, "IA ");
+			ri.Printf(PRINT_DEVELOPER, "IA ");
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, "   ");
+			ri.Printf(PRINT_DEVELOPER, "   ");
 		}
 
 		if(shader->defaultShader)
 		{
-			ri.Printf(PRINT_ALL, ": %s (DEFAULTED)\n", shader->name);
+			ri.Printf(PRINT_DEVELOPER, ": %s (DEFAULTED)\n", shader->name);
 		}
 		else
 		{
-			ri.Printf(PRINT_ALL, ": %s\n", shader->name);
+			ri.Printf(PRINT_DEVELOPER, ": %s\n", shader->name);
 		}
 		count++;
 	}
-	ri.Printf(PRINT_ALL, "%i total shaders\n", count);
-	ri.Printf(PRINT_ALL, "------------------\n");
+	ri.Printf(PRINT_DEVELOPER, "%i total shaders\n", count);
+	ri.Printf(PRINT_DEVELOPER, "------------------\n");
 }
 
 void R_ShaderExp_f(void)
@@ -5705,7 +5705,7 @@
 
 	strcpy(shader.name, "dummy");
 
-	ri.Printf(PRINT_ALL, "-----------------------\n");
+	ri.Printf(PRINT_DEVELOPER, "-----------------------\n");
 
 	for(i = 1; i < ri.Cmd_Argc(); i++)
 	{
@@ -5717,9 +5717,9 @@
 
 	ParseExpression(&buffer_p, &exp);
 
-	ri.Printf(PRINT_ALL, "%i total ops\n", exp.numOps);
-	ri.Printf(PRINT_ALL, "%f result\n", RB_EvalExpression(&exp, 0));
-	ri.Printf(PRINT_ALL, "------------------\n");
+	ri.Printf(PRINT_DEVELOPER, "%i total ops\n", exp.numOps);
+	ri.Printf(PRINT_DEVELOPER, "%f result\n", RB_EvalExpression(&exp, 0));
+	ri.Printf(PRINT_DEVELOPER, "------------------\n");
 }
 
 /*
@@ -5743,7 +5743,7 @@
 	char            filename[MAX_QPATH];
 	long            sum = 0;
 
-	ri.Printf(PRINT_ALL, "----- ScanAndLoadGuideFiles -----\n");
+	ri.Printf(PRINT_DEVELOPER, "----- ScanAndLoadGuideFiles -----\n");
 
 	s_guideText = NULL;
 	Com_Memset(guideTextHashTableSizes, 0, sizeof(guideTextHashTableSizes));
@@ -5821,7 +5821,7 @@
 			// parse guide name
 			token = Com_ParseExt(&p, qtrue);
 
-			//ri.Printf(PRINT_ALL, "guide: '%s'\n", token);
+			//ri.Printf(PRINT_DEVELOPER, "guide: '%s'\n", token);
 
 			hash = generateHashValue(token, MAX_GUIDETEXT_HASH);
 			guideTextHashTableSizes[hash]++;
@@ -5906,7 +5906,7 @@
 			oldp = p;
 			token = Com_ParseExt(&p, qtrue);
 
-			//ri.Printf(PRINT_ALL, "...hashing guide '%s'\n", token);
+			//ri.Printf(PRINT_DEVELOPER, "...hashing guide '%s'\n", token);
 
 			hash = generateHashValue(token, MAX_GUIDETEXT_HASH);
 			guideTextHashTable[hash][guideTextHashTableSizes[hash]++] = oldp;
@@ -5975,7 +5975,7 @@
 	char            filename[MAX_QPATH];
 	long            sum = 0;
 
-	ri.Printf(PRINT_ALL, "----- ScanAndLoadShaderFiles -----\n");
+	ri.Printf(PRINT_DEVELOPER, "----- ScanAndLoadShaderFiles -----\n");
 
 	// scan for shader files
 #if defined(COMPAT_Q3A)
@@ -6069,7 +6069,7 @@
 				// parse shader name
 				token = Com_ParseExt(&p, qtrue);
 
-				//ri.Printf(PRINT_ALL, "...guided '%s'\n", token);
+				//ri.Printf(PRINT_DEVELOPER, "...guided '%s'\n", token);
 
 				hash = generateHashValue(token, MAX_SHADERTEXT_HASH);
 				shaderTextHashTableSizes[hash]++;
@@ -6234,7 +6234,7 @@
 				oldp = p;
 				token = Com_ParseExt(&p, qtrue);
 
-				//ri.Printf(PRINT_ALL, "...guided '%s'\n", token);
+				//ri.Printf(PRINT_DEVELOPER, "...guided '%s'\n", token);
 
 				hash = generateHashValue(token, MAX_SHADERTEXT_HASH);
 				shaderTextHashTable[hash][shaderTextHashTableSizes[hash]++] = oldp;
@@ -6299,7 +6299,7 @@
 */
 static void CreateInternalShaders(void)
 {
-	ri.Printf(PRINT_ALL, "----- CreateInternalShaders -----\n");
+	ri.Printf(PRINT_DEVELOPER, "----- CreateInternalShaders -----\n");
 
 	tr.numShaders = 0;
 
@@ -6334,7 +6334,7 @@
 
 static void CreateExternalShaders(void)
 {
-	ri.Printf(PRINT_ALL, "----- CreateExternalShaders -----\n");
+	ri.Printf(PRINT_DEVELOPER, "----- CreateExternalShaders -----\n");
 
 	tr.projectionShadowShader = R_FindShader("projectionShadow", SHADER_3D_DYNAMIC, qtrue);
 	tr.flareShader = R_FindShader("flareShader", SHADER_3D_DYNAMIC, qtrue);
