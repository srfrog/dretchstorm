--- code/qcommon/q_shared.c	2011-03-08 17:46:44.153923012 -0700
+++ code-old/qcommon/q_shared.c	2011-04-20 18:13:49.302436100 -0700
@@ -990,7 +990,6 @@
 	int             c = 0, len;
 	qboolean        hasNewLines = qfalse;
 	char           *data;
-	const char    **punc;
 
 	if(!data_p)
 	{
@@ -1086,145 +1085,40 @@
 		}
 	}
 
-	// check for a number
-	// is this parsing of negative numbers going to cause expression problems
-	if(	(c >= '0' && c <= '9') ||
-		(c == '-' && data[1] >= '0' && data[1] <= '9') ||
-		(c == '.' && data[1] >= '0' && data[1] <= '9') ||
-		(c == '-' && data[1] == '.' && data[2] >= '0' && data[2] <= '9'))
+	/*************************************************************
+	 * XXX ghostshell - parse as regular words, forget about types
+	 *************************************************************/
+	if (c>32 && (c != '(' && c != ')' && c != ','))
 	{
 		do
 		{
-			if(len < MAX_TOKEN_CHARS - 1)
-			{
-				com_token[len] = c;
-				len++;
-			}
-			data++;
-
-			c = *data;
-		} while((c >= '0' && c <= '9') || c == '.');
-
-		// parse the exponent
-		if(c == 'e' || c == 'E')
-		{
-			if(len < MAX_TOKEN_CHARS - 1)
-			{
-				com_token[len] = c;
-				len++;
-			}
-			data++;
-			c = *data;
-
-			if(c == '-' || c == '+')
-			{
-				if(len < MAX_TOKEN_CHARS - 1)
-				{
-					com_token[len] = c;
-					len++;
-				}
-				data++;
-				c = *data;
-			}
-
-			do
-			{
-				if(len < MAX_TOKEN_CHARS - 1)
-				{
-					com_token[len] = c;
-					len++;
-				}
-				data++;
-
-				c = *data;
-			} while(c >= '0' && c <= '9');
-		}
-
-		if(len == MAX_TOKEN_CHARS)
-		{
-			len = 0;
-		}
-		com_token[len] = 0;
-
-		*data_p = (char *)data;
-		return com_token;
-	}
-
-	// check for a regular word
-	// we still allow forward and back slashes in name tokens for pathnames
-	// and also colons for drive letters
-	if(	(c >= 'a' && c <= 'z') ||
-		(c >= 'A' && c <= 'Z') ||
-		(c == '_') ||
-		(c == '/') ||
-		(c == '\\') ||
-		(c == '$') || (c == '*')) // Tr3B - for bad shader strings
-	{
-		do
-		{
-			if(len < MAX_TOKEN_CHARS - 1)
+			if (len < MAX_TOKEN_CHARS - 1)
 			{
 				com_token[len] = c;
 				len++;
 			}
 			data++;
-
 			c = *data;
-		}
-		while
-			((c >= 'a' && c <= 'z') ||
-			 (c >= 'A' && c <= 'Z') ||
-			 (c == '_') ||
-			 (c == '-') ||
-			 (c >= '0' && c <= '9') ||
-			 (c == '/') ||
-			 (c == '\\') ||
-			 (c == ':') ||
-			 (c == '.') ||
-			 (c == '$') ||
-			 (c == '*') ||
-			 (c == '@'));
+			if ( c == '\n' )
+				com_lines++;
+		} while (c>32 && (c != '(' && c != ')' && c != ','));
 
-		if(len == MAX_TOKEN_CHARS)
-		{
-			len = 0;
-		}
+      if(len == MAX_TOKEN_CHARS)
+      {
+         len = 0;
+      }
 		com_token[len] = 0;
 
-		*data_p = (char *)data;
+   	*data_p = (char *)data;
 		return com_token;
 	}
+	/*************************************************************/
 
-	// check for multi-character punctuation token
-	for(punc = punctuation; *punc; punc++)
-	{
-		int             l;
-		int             j;
-
-		l = strlen(*punc);
-		for(j = 0; j < l; j++)
-		{
-			if(data[j] != (*punc)[j])
-			{
-				break;
-			}
-		}
-		if(j == l)
-		{
-			// a valid multi-character punctuation
-			Com_Memcpy(com_token, *punc, l);
-			com_token[l] = 0;
-			data += l;
-			*data_p = (char *)data;
-			return com_token;
-		}
-	}
-
-	// single character punctuation
-	com_token[0] = *data;
-	com_token[1] = 0;
-	data++;
-	*data_p = (char *)data;
+  // single character punctuation
+   com_token[0] = *data;
+   com_token[1] = 0;
+   data++;
+   *data_p = (char *)data;
 
 	return com_token;
 }
